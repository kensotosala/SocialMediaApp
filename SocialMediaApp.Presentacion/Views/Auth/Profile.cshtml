@model SocialMediaApp.Dominio.ViewModels.ProfileViewModel

@{
    ViewData["Title"] = "Opciones de Perfil";
}

@if (TempData["Mensaje"] != null)
{
    <div class="alert @TempData["TipoMensaje"]" role="alert">
        @TempData["Mensaje"]
    </div>
}
﻿
<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestionar Perfil</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #FFD86B, #FFF4D7);
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }


        .upload-btn {
            background-color: #cfb623;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .upload-btn:hover {
                background-color: #cfb623;
            }

        .profile-form {
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #555;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd9d9;
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

            .form-control:focus {
                outline: none;
                border-color: #cfb623;
            }

        textarea.form-control {
            resize: vertical;
            min-height: 100px;
        }

        .interests-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
            min-height: 40px;
        }



        .btn-save {
            background-color: #cfb623;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }

            .btn-save:hover {
                background-color: #cfb623;
            }

        .password-section {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #ddd;
        }


        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }




        .profile-header {
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            text-align: center;
        }

        .profile-title {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 1rem;
        }

        .profile-image-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .profile-image {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .upload-btn {
            background-color: #0078d4;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .upload-btn:hover {
                background-color: #106ebe;
            }

            .upload-btn.hidden {
                display: none;
            }

        .form-group {
            margin-bottom: 1rem;
            font-family: system-ui, -apple-system, sans-serif;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .interest-input-container {
            position: relative;
            margin-bottom: 1rem;
        }

        .interest-input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .interest-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            display: none;
            z-index: 1000;
        }

        .suggestion-item {
            padding: 0.5rem;
            cursor: pointer;
        }

            .suggestion-item:hover {
                background-color: #f0f0f0;
            }

        .interests-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .interest-tag {
            background-color: #e9ecef;
            border-radius: 20px;
            padding: 0.3rem 0.8rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .remove-interest {
            border: none;
            background: none;
            color: #666;
            cursor: pointer;
            padding: 0;
            font-size: 1.2rem;
            line-height: 1;
        }

            .remove-interest:hover {
                color: #dc3545;
            }

        small {
            color: #dc3545;
            display: none;
        }

        .interests-section {
            margin-bottom: 2rem;
        }

        .interest-input-wrapper {
            position: relative;
            margin-bottom: 1rem;
        }

        .interest-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

            .interest-input:focus {
                outline: none;
                border-color: #0078d4;
            }

        .interests-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            min-height: 50px;
            padding: 0.5rem;
            border: 1px dashed #ddd;
            border-radius: 5px;
        }

        .interest-tag {
            background-color: #e9ecef;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            cursor: default;
        }

            .interest-tag:hover {
                background-color: #dee2e6;
            }

            .interest-tag button {
                background: none;
                border: none;
                color: #666;
                cursor: pointer;
                padding: 0;
                font-size: 1.2rem;
                line-height: 1;
                display: flex;
                align-items: center;
            }

                .interest-tag button:hover {
                    color: #dc3545;
                }

        .suggestions-container {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }

        .suggestion-item {
            padding: 0.75rem 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .suggestion-item:hover {
                background-color: #f8f9fa;
            }

        .warning-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: none;
        }
    </style>
</head>
<body>
    <!-- El HTML se mantiene igual -->
    <div class="container">

        <div class="profile-header">
            <h1 class="profile-title">Gestionar Perfil</h1>
            <div class="profile-image-container">
                <img src="/api/placeholder/150/150" alt="Foto de perfil" class="profile-image" id="profile-image">
                <button class="upload-btn" id="upload-btn">
                    <i class="fas fa-camera"></i> Agregar foto
                </button>
            </div>
        </div>
                <form asp-action="Profile" class="profile-form" method="post">

                <div class="form-header">
                </div>

                
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="form-row">


                        <div class="form-group">
                            <label asp-for="Nombre">Nombre:</label>
                            <input asp-for="Nombre" class="form-control" type="text" value="@Model.Nombre">
                            <span asp-validation-for="Nombre" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Apellido">Apellido:</label>
                            <input asp-for="Apellido" class="form-control" type="text"  value="@Model.Apellido">
                            <span asp-validation-for="Apellido" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Biografia">Biografia:</label>
                            
                            @if(Model.Biografia == null)
                            {
                                <input asp-for="Biografia" class="form-control" type="text" placeholder="No has ingresado una biografía." value="@Model.Biografia">    
                            }
                            else
                            {
                                <input asp-for="Biografia" class="form-control" type="text"  value="@Model.Biografia">    
                            }

                            <span asp-validation-for="Biografia" class="text-danger"></span>                                                       
                        </div>

                        <div class="form-group">
                            <label asp-for="Ubicacion">Ubicación:</label>
                            
                            @if(Model.Ubicacion == null)
                            {
                                <input asp-for="Ubicacion" class="form-control" type="text" placeholder="No has ingresado una ubicación." value="@Model.Ubicacion"> 
                            }
                            else
                            {
                                <input asp-for="Ubicacion" class="form-control" type="text"  value="@Model.Ubicacion">    
                            }

                            <span asp-validation-for="Ubicacion" class="text-danger"></span>                                                       
                        </div>

                        @if (User.Claims.FirstOrDefault(c => c.Type == "ExternalLogin")?.Value == "1")
                        {
                            <div class="form-group">
                                <input asp-for="Email" class="form-control" type="text" placeholder="Correo electrónico" hidden value="@Model.Email">
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <label asp-for="Email">Correo electrónico:</label>
                                <input asp-for="Email" class="form-control" type="text" placeholder="Correo electrónico" />
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                        }
                      <button type="submit" value="Profile" class="btn btn-primary">Actualizar</button>
                
                </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Elementos del DOM
            const profileForm = document.querySelector('.profile-form');
            const uploadBtn = document.getElementById('upload-btn');
            const profileImage = document.getElementById('profile-image');
            const biografiaInput = document.getElementById('biografia');
            const ubicacionInput = document.getElementById('ubicacion');
            const nombreInput = document.getElementById('nombre');
            const emailInput = document.getElementById('email');

            // Variable para almacenar la imagen seleccionada
            let selectedImage = null;

            // Función para manejar la carga de imagen
            uploadBtn.addEventListener('click', function () {
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.accept = 'image/*';

                fileInput.onchange = function (e) {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (event) {
                            profileImage.src = event.target.result;
                            selectedImage = file;
                            uploadBtn.innerHTML = '<i class="fas fa-camera"></i> Cambiar foto';
                        };
                        reader.readAsDataURL(file);
                    }
                };

                fileInput.click();
            });

            // Manejo del arrastre de imágenes (Drag and Drop)
            const profileImageContainer = document.querySelector('.profile-image-container');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                profileImageContainer.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            // Manejo del drop de imagen
            profileImageContainer.addEventListener('drop', function (e) {
                const file = e.dataTransfer.files[0];
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function (event) {
                        profileImage.src = event.target.result;
                        selectedImage = file;
                        uploadBtn.innerHTML = '<i class="fas fa-camera"></i> Cambiar foto';
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Función para cargar los datos del perfil
            function loadProfileData() {
                // Aquí normalmente harías una llamada al servidor
                // Por ahora usaremos datos de ejemplo
                const profileData = {
                    nombre: 'Usuario Ejemplo',
                    email: 'usuario@ejemplo.com',
                    biografia: 'Esta es una biografía de ejemplo',
                    ubicacion: 'Ciudad Ejemplo'
                };

                nombreInput.value = profileData.nombre;
                emailInput.value = profileData.email;
                biografiaInput.value = profileData.biografia;
                ubicacionInput.value = profileData.ubicacion;
            }

            // Cargar datos iniciales
            loadProfileData();

            // Manejo del envío del formulario
            profileForm.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Crear objeto FormData para enviar los datos
                const formData = new FormData();
                formData.append('nombre', nombreInput.value);
                formData.append('email', emailInput.value);
                formData.append('biografia', biografiaInput.value);
                formData.append('ubicacion', ubicacionInput.value);

                if (selectedImage) {
                    formData.append('imagen', selectedImage);
                }

                try {
                    // Aquí normalmente harías la llamada al servidor
                    // Por ahora solo mostraremos los datos en consola
                    console.log('Datos a enviar:');
                    for (let [key, value] of formData.entries()) {
                        console.log(key, ':', value);
                    }

                    // Simulamos una respuesta exitosa
                    await new Promise(resolve => setTimeout(resolve, 1000));

                    // Mostrar mensaje de éxito
                    alert('Perfil actualizado correctamente');

                } catch (error) {
                    console.error('Error al actualizar el perfil:', error);
                    alert('Error al actualizar el perfil. Por favor, intenta nuevamente.');
                }
            });

            // Validación de campos en tiempo real
            const inputs = [nombreInput, emailInput, biografiaInput, ubicacionInput];
            inputs.forEach(input => {
                input.addEventListener('input', function () {
                    if (this.value.trim() === '') {
                        this.classList.add('invalid');
                    } else {
                        this.classList.remove('invalid');
                    }
                });
            });
            const interestInput = document.getElementById('interest-input');
            const interestsContainer = document.getElementById('interests-container');
            const suggestionsContainer = document.getElementById('suggestions-container');
            const maxInterestsWarning = document.getElementById('max-interests-warning');
            const duplicateWarning = document.getElementById('duplicate-warning');

            const MAX_INTERESTS = 5;
            const currentInterests = new Set();

            // Lista de sugerencias predefinidas
            const suggestedInterests = [
                "Deportes", "Música", "Tecnología", "Cine", "Viajes",
                "Lectura", "Cocina", "Arte", "Fotografía", "Gaming",
                "Naturaleza", "Idiomas", "Ciencia", "Historia", "Moda"
            ];

            function hideWarnings() {
                maxInterestsWarning.style.display = 'none';
                duplicateWarning.style.display = 'none';
            }

            function showSuggestions(inputValue) {
                const value = inputValue.toLowerCase();
                if (!value) {
                    suggestionsContainer.style.display = 'none';
                    return;
                }

                const matchingSuggestions = suggestedInterests.filter(interest =>
                    interest.toLowerCase().includes(value) &&
                    !currentInterests.has(interest)
                );

                if (matchingSuggestions.length === 0) {
                    suggestionsContainer.style.display = 'none';
                    return;
                }

                suggestionsContainer.innerHTML = '';
                matchingSuggestions.forEach(suggestion => {
                    const div = document.createElement('div');
                    div.className = 'suggestion-item';
                    div.textContent = suggestion;
                    div.addEventListener('click', () => addInterest(suggestion));
                    suggestionsContainer.appendChild(div);
                });

                suggestionsContainer.style.display = 'block';
            }

            function addInterest(interest) {
                hideWarnings();

                if (currentInterests.size >= MAX_INTERESTS) {
                    maxInterestsWarning.style.display = 'block';
                    return;
                }

                if (currentInterests.has(interest)) {
                    duplicateWarning.style.display = 'block';
                    return;
                }

                // Crear y añadir el tag
                const tag = document.createElement('div');
                tag.className = 'interest-tag';
                tag.innerHTML = `
                                ${interest}
                                <button type="button" aria-label="Eliminar interés">
                                    <i class="fas fa-times"></i>
                                </button>
                            `;

                currentInterests.add(interest);
                interestsContainer.appendChild(tag);

                // Añadir evento para eliminar el tag
                const removeButton = tag.querySelector('button');
                removeButton.addEventListener('click', () => {
                    tag.remove();
                    currentInterests.delete(interest);
                    hideWarnings();
                    interestInput.disabled = false;
                    validateInterestInput();
                });

                // Limpiar input y sugerencias
                interestInput.value = '';
                suggestionsContainer.style.display = 'none';
                validateInterestInput();
            }

            function validateInterestInput() {
                if (currentInterests.size >= MAX_INTERESTS) {
                    interestInput.disabled = true;
                    maxInterestsWarning.style.display = 'block';
                } else {
                    interestInput.disabled = false;
                    maxInterestsWarning.style.display = 'none';
                }
            }

            // Event listeners
            interestInput.addEventListener('input', (e) => {
                showSuggestions(e.target.value);
            });

            interestInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const value = e.target.value.trim();
                    if (value) {
                        addInterest(value);
                    }
                }
            });

            // Cerrar sugerencias al hacer clic fuera
            document.addEventListener('click', (e) => {
                if (!suggestionsContainer.contains(e.target) && e.target !== interestInput) {
                    suggestionsContainer.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}